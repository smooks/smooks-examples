<?xml version="1.0" encoding="UTF-8"?>

<!--
Copyright (c) 2021 Owl Cyber Defense. All rights reserved.

Developed by: Owl Cyber Defense
              http://www.owlcyberdefense.com

Permission is hereby granted, free of charge, to any person obtaining a copy of
this software and associated documentation files (the "Software"), to deal with
the Software without restriction, including without limitation the rights to
use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies
of the Software, and to permit persons to whom the Software is furnished to do
so, subject to the following conditions:

 1. Redistributions of source code must retain the above copyright notice,
    this list of conditions and the following disclaimers.

 2. Redistributions in binary form must reproduce the above copyright
    notice, this list of conditions and the following disclaimers in the
    documentation and/or other materials provided with the distribution.

 3. Neither the names of Tresys Technology, nor the names of its contributors
    may be used to endorse or promote products derived from this Software
    without specific prior written permission.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
CONTRIBUTORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS WITH THE
SOFTWARE.
-->


<!--
Version 0.0.1  nitf.dfdl.xsd

This DFDL schema provides a DFDL model for NITF v2.1/NSIF v1.0.

NOTE: This schema relies on the various types referenced from the nitfExtensionTypes
namespace to be implemented somewhere on the classpath.  See the dfdl-nitf or
dfdl-raster schema projects for examples.

The message root is 'NITF'.
-->


<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema"
           xmlns:dfdl="http://www.ogf.org/dfdl/dfdl-1.0/"
           xmlns:dfdlx="http://www.ogf.org/dfdl/dfdl-1.0/extensions"
           xmlns:fn="http://www.w3.org/2005/xpath-functions"
           xmlns:daf="urn:ogf:dfdl:2013:imp:daffodil.apache.org:2018:ext"
           xmlns:nitf="urn:nitf:2.1"
           xmlns:nitfc="urn:nitfCommonTypes"
           xmlns:nitfx="urn:nitfExtensionTypes"
           targetNamespace="urn:nitf:2.1"
           elementFormDefault="unqualified">

  <xs:import namespace="urn:nitfCommonTypes" schemaLocation="nitf_common_types.dfdl.xsd" />
  <xs:import namespace="urn:nitfExtensionTypes" schemaLocation="nitf_extension_types.dfdl.xsd" />

  <xs:annotation>
    <xs:appinfo source="http://www.ogf.org/dfdl/">

      <dfdl:defineVariable name="nitfVersion" type="xs:string" />
      <dfdl:defineVariable name="payloadSizeInBytes" type="xs:unsignedLong" />
      <dfdl:defineVariable name="maxBinarySizeInBytes" type="xs:unsignedLong" external="true" defaultValue="10485760" /> <!-- Default 10mb -->

      <dfdl:format ref="nitfc:nitfGeneralFormat" />

    </xs:appinfo>
  </xs:annotation>

  <xs:element name="NITF">
    <xs:complexType>
      <xs:choice>
        <xs:sequence>
          <xs:element ref="nitf:ValidData"/>
        </xs:sequence>
        <xs:sequence>
          <xs:element name="InvalidData" type="xs:hexBinary" dfdl:lengthKind="delimited"
                      dfdl:encoding="ISO-8859-1"/>
        </xs:sequence>
      </xs:choice>
    </xs:complexType>
  </xs:element>

  <xs:element name="ValidData">
    <xs:complexType>
      <xs:sequence>
        <xs:element name="Header">
          <xs:complexType>
            <xs:sequence>
              <xs:element name="FileProfileName" type="nitfc:BCS-A" dfdl:length="4">
                <xs:annotation>
                  <xs:appinfo source="http://www.ogf.org/dfdl/">
                    <dfdl:assert message="File Profile Name must equal 'NITF' or 'NSIF'" test="{ (. eq 'NITF') or (. eq 'NSIF') }" />
                  </xs:appinfo>
                </xs:annotation>
              </xs:element>
              <xs:element name="FileVersion" type="nitfc:BCS-A" dfdl:length="5">
                <xs:annotation>
                  <xs:appinfo source="http://www.ogf.org/dfdl/">
                    <dfdl:assert message="File Version must equal '02.10' or '02.00' for NTIF or '01.00' for NSIF" test="{ ((../FileProfileName eq 'NITF') and ((. eq '02.10') or (. eq '02.00'))) or ((../FileProfileName eq 'NSIF') and (. eq '01.00')) }" />
                    <dfdl:setVariable ref="nitf:nitfVersion" value="{ if (../FileProfileName eq 'NSIF') then '02.10' else . }" />
                  </xs:appinfo>
                </xs:annotation>
              </xs:element>
              <xs:element name="ComplexityLevel" type="nitfc:BCS-NP" dfdl:length="2" />
              <xs:element name="StandardType" type="nitfc:BCS-A" dfdl:length="4" />
              <xs:element name="OriginatingStationID" type="nitfc:BCS-A" dfdl:length="10" />
              <xs:element name="FileDateAndTime" type="nitfc:dateTime" />
              <xs:element name="FileTitle" type="nitfc:ECS-A" dfdl:length="80" nillable="true" dfdl:ref="nitfc:nilString"/>
              <xs:element name="ClassificationInformation" type="nitf:classificationInfo" />
              <xs:element name="FileCopyNumber" type="nitfc:BCS-NP" dfdl:length="5" />
              <xs:element name="FileNumberOfCopies" type="nitfc:BCS-NP" dfdl:length="5" />
              <xs:element name="Encryption" type="nitfc:BCS-N" dfdl:length="1" />
              <xs:element name="FileBackgroundColor" minOccurs="0" maxOccurs="1" dfdl:occursCountKind="expression" dfdl:occursCount="{ if ($nitf:nitfVersion eq '02.10') then 1 else 0 }">
                <xs:complexType>
                  <xs:sequence>
                    <xs:element name="Red" type="xs:hexBinary" dfdl:lengthKind="explicit" dfdl:length="1" />
                    <xs:element name="Green" type="xs:hexBinary" dfdl:lengthKind="explicit" dfdl:length="1" />
                    <xs:element name="Blue" type="xs:hexBinary" dfdl:lengthKind="explicit" dfdl:length="1" />
                  </xs:sequence>
                </xs:complexType>
              </xs:element>
              <xs:element name="OriginatorsName" type="nitfc:ECS-A" dfdl:length="{ if ($nitf:nitfVersion eq '02.00') then 27 else 24 }" nillable="true" dfdl:ref="nitfc:nilString" />
              <xs:element name="OriginatorsPhoneNumber" type="nitfc:ECS-A" dfdl:length="18" nillable="true" dfdl:ref="nitfc:nilString" />
              <xs:element name="FileLength" type="nitfc:BCS-NPbig" dfdl:length="12" > <!-- TODO: Output Value Calc -->
                <xs:annotation>
                  <xs:appinfo source="http://www.ogf.org/dfdl/">
                    <dfdl:assert message="FileLength of 999999999999 (unknown file length when header was created) is not supported." test="{ . ne 999999999999 }" />
                  </xs:appinfo>
                </xs:annotation>
              </xs:element>
              <xs:element name="FileHeaderLength" type="nitfc:BCS-NP" dfdl:length="6" /> <!-- TODO: Output Value Calc -->
              <xs:element name="NumberOfImageSegments" type="nitfc:BCS-NP" dfdl:length="3" dfdl:outputValueCalc="{ fn:count(../../ImageSegment) }" />
              <xs:element name="ImageSegmentLengths" minOccurs="0" maxOccurs="999" dfdl:occursCountKind="expression" dfdl:occursCount="{ ../NumberOfImageSegments }">
                <xs:complexType>
                  <xs:sequence>
                    <xs:element name="HeaderLength" type="nitfc:BCS-NP" dfdl:length="6" dfdl:outputValueCalc="{
                      259 +
                      (if ($nitf:nitfVersion eq '02.00') then dfdl:valueLength(../../../ImageSegment[dfdl:occursIndex()]/Header/ClassificationInformation, 'bytes') else 167) +
                      (60 * fn:count(../../../ImageSegment[dfdl:occursIndex()]/Header/ImageGeographicLocation)) +
                      (80 * fn:count(../../../ImageSegment[dfdl:occursIndex()]/Header/ImageComment)) +
                      (4  * fn:count(../../../ImageSegment[dfdl:occursIndex()]/Header/CompressionRateCode)) +
                      (5  * fn:count(../../../ImageSegment[dfdl:occursIndex()]/Header/NumberOfMultispectralBands)) +
                      (3  * fn:count(../../../ImageSegment[dfdl:occursIndex()]/Header/UserDefinedOverflow)) +
                      (3  * fn:count(../../../ImageSegment[dfdl:occursIndex()]/Header/ImageExtendedSubheaderOverflow)) +
                      (if (fn:exists(../../../ImageSegment[dfdl:occursIndex()]/Header/Bands)) then dfdl:valueLength(../../../ImageSegment[dfdl:occursIndex()]/Header/Bands, 'bytes') else 0) +
                      (if (fn:exists(../../../ImageSegment[dfdl:occursIndex()]/Header/UserDefinedImageData)) then dfdl:valueLength(../../../ImageSegment[dfdl:occursIndex()]/Header/UserDefinedImageData[1], 'bytes') else 0) +
                      (if (fn:exists(../../../ImageSegment[dfdl:occursIndex()]/Header/ImageExtendedSubheaderData)) then dfdl:valueLength(../../../ImageSegment[dfdl:occursIndex()]/Header/ImageExtendedSubheaderData[1], 'bytes') else 0)
                      }">
                      <xs:annotation>
                        <xs:appinfo source="http://www.ogf.org/dfdl/">
                          <dfdl:assert message="FileLength of 999999 (unknown image header length when header was created) is not supported." test="{ . ne 999999 }" />
                        </xs:appinfo>
                      </xs:annotation>
                    </xs:element>
                    <xs:element name="DataLength" type="nitfc:BCS-NPbig" dfdl:length="10" dfdl:outputValueCalc="{ dfdl:valueLength(../../../ImageSegment[dfdl:occursIndex()]/Data, 'bytes') }">
                      <xs:annotation>
                        <xs:appinfo source="http://www.ogf.org/dfdl/">
                          <dfdl:assert message="FileLength of 9999999999 (unknown image data length when header was created) is not supported." test="{ . ne 9999999999 }" />
                        </xs:appinfo>
                      </xs:annotation>
                    </xs:element>
                  </xs:sequence>
                </xs:complexType>
              </xs:element>
              <xs:element name="NumberOfGraphicSegments" type="nitfc:BCS-NP" dfdl:length="3" dfdl:outputValueCalc="{ fn:count(../../GraphicSegment) }" />
              <xs:element name="GraphicSegmentLengths" minOccurs="0" maxOccurs="999" dfdl:occursCountKind="expression" dfdl:occursCount="{ ../NumberOfGraphicSegments }">
                <xs:complexType>
                  <xs:sequence>
                    <xs:element name="HeaderLength" type="nitfc:BCS-NP" dfdl:length="4" dfdl:outputValueCalc="{
                      258 +
                      (3  * fn:count(../../../GraphicSegment[dfdl:occursIndex()]/Header/GraphicExtendedSubheaderOverflow)) +
                      (if (fn:exists(../../../GraphicSegment[dfdl:occursIndex()]/Header/GraphicExtendedSubheaderData)) then dfdl:valueLength(../../../GraphicSegment[dfdl:occursIndex()]/Header/GraphicExtendedSubheaderData[1], 'bytes') else 0)
                      }">
                      <xs:annotation>
                        <xs:appinfo source="http://www.ogf.org/dfdl/">
                          <dfdl:assert message="FileLength of 9999 (unknown graphic header length when header was created) is not supported." test="{ . ne 9999 }" />
                        </xs:appinfo>
                      </xs:annotation>
                    </xs:element>
                    <xs:element name="DataLength" type="nitfc:BCS-NP" dfdl:length="6" dfdl:outputValueCalc="{ dfdl:valueLength(../../../GraphicSegment[dfdl:occursIndex()]/Data, 'bytes') }">
                      <xs:annotation>
                        <xs:appinfo source="http://www.ogf.org/dfdl/">
                          <dfdl:assert message="FileLength of 999999 (unknown graphic data length when header was created) is not supported." test="{ . ne 999999 }" />
                        </xs:appinfo>
                      </xs:annotation>
                    </xs:element>
                  </xs:sequence>
                </xs:complexType>
              </xs:element>
              <xs:element name="ReservedForFutureUse" type="nitfc:BCS-NP" dfdl:length="3" />
              <xs:element name="NumberOfTextSegments" type="nitfc:BCS-NP" dfdl:length="3" dfdl:outputValueCalc="{ fn:count(../../TextSegment) }" />
              <xs:element name="TextSegmentLengths" minOccurs="0" maxOccurs="999" dfdl:occursCountKind="expression" dfdl:occursCount="{ ../NumberOfTextSegments }">
                <xs:complexType>
                  <xs:sequence>
                    <xs:element name="HeaderLength" type="nitfc:BCS-NP" dfdl:length="4" dfdl:outputValueCalc="{
                      282 +
                      (3  * fn:count(../../../TextSegment[dfdl:occursIndex()]/Header/TextExtendedSubheaderOverflow)) +
                      (if (fn:exists(../../../TextSegment[dfdl:occursIndex()]/Header/TextExtendedSubheaderData)) then dfdl:valueLength(../../../TextSegment[dfdl:occursIndex()]/Header/TextExtendedSubheaderData[1], 'bytes') else 0)
                      }">
                      <xs:annotation>
                        <xs:appinfo source="http://www.ogf.org/dfdl/">
                          <dfdl:assert message="FileLength of 9999 (unknown text header length when header was created) is not supported." test="{ . ne 9999 }" />
                        </xs:appinfo>
                      </xs:annotation>
                    </xs:element>
                    <xs:element name="DataLength" type="nitfc:BCS-NP" dfdl:length="5" dfdl:outputValueCalc="{ dfdl:valueLength(../../../TextSegment[dfdl:occursIndex()]/Data, 'bytes') }">
                      <xs:annotation>
                        <xs:appinfo source="http://www.ogf.org/dfdl/">
                          <dfdl:assert message="FileLength of 99999 (unknown text data length when header was created) is not supported." test="{ . ne 99999 }" />
                        </xs:appinfo>
                      </xs:annotation>
                    </xs:element>
                  </xs:sequence>
                </xs:complexType>
              </xs:element>
              <xs:element name="NumberOfDataExtensionSegments" type="nitfc:BCS-NP" dfdl:length="3" dfdl:outputValueCalc="{ fn:count(../../DataExtensionSegment) }" />
              <xs:element name="DataExtensionSegmentLengths" minOccurs="0" maxOccurs="999" dfdl:occursCountKind="expression" dfdl:occursCount="{ ../NumberOfDataExtensionSegments }">
                <xs:complexType>
                  <xs:sequence>
                    <xs:element name="HeaderLength" type="nitfc:BCS-NP" dfdl:length="4" dfdl:outputValueCalc="{
                      200 +
                      (3  * fn:count(../../../DataExtensionSegment[dfdl:occursIndex()]/Header/DESOverflowedHeaderType)) +
                      (if ((../../../DataExtensionSegment[dfdl:occursIndex()]/Header/UniqueDESTypeIdentifier eq 'TRE_OVERFLOW') or (../../../DataExtensionSegment[dfdl:occursIndex()]/Header/UniqueDESTypeIdentifier eq 'Registered Extensions')) then 6 else 0) +
                      (if (fn:exists(../../../DataExtensionSegment[dfdl:occursIndex()]/Header/DESUserDefinedSubheaderFields)) then dfdl:valueLength(../../../DataExtensionSegment[dfdl:occursIndex()]/Header/DESUserDefinedSubheaderFields[1], 'bytes') else 0)
                      }">
                      <xs:annotation>
                        <xs:appinfo source="http://www.ogf.org/dfdl/">
                          <dfdl:assert message="FileLength of 9999 (unknown data extension header length when header was created) is not supported." test="{ . ne 9999 }" />
                        </xs:appinfo>
                      </xs:annotation>
                    </xs:element>
                    <xs:element name="DataLength" type="nitfc:BCS-NP" dfdl:length="9"> <!-- dfdl:outputValueCalc="{ dfdl:valueLength(../../../DataExtensionSegment[dfdl:occursIndex()]/Data, 'bytes') }"> -->
                      <xs:annotation>
                        <xs:appinfo source="http://www.ogf.org/dfdl/">
                          <dfdl:assert message="FileLength of 999999999 (unknown data extension data length when header was created) is not supported." test="{ . ne 999999999 }" />
                        </xs:appinfo>
                      </xs:annotation>
                    </xs:element>
                  </xs:sequence>
                </xs:complexType>
              </xs:element>
              <xs:element name="NumberOfReservedExtensionSegments" type="nitfc:BCS-NP" dfdl:length="3" dfdl:outputValueCalc="{ fn:count(../../ReservedExtensionSegment) }" />
              <xs:element name="ReservedExtensionSegmentLengths" minOccurs="0" maxOccurs="999" dfdl:occursCountKind="expression" dfdl:occursCount="{ ../NumberOfReservedExtensionSegments }">
                <xs:complexType>
                  <xs:sequence>
                    <xs:element name="HeaderLength" type="nitfc:BCS-NP" dfdl:length="4" dfdl:outputValueCalc="{
                      200 +
                      (if (fn:exists(../../../ReservedExtensionSegment[dfdl:occursIndex()]/Header/RESUserDefinedSubheaderFields)) then dfdl:valueLength(../../../ReservedExtensionSegment[dfdl:occursIndex()]/Header/RESUserDefinedSubheaderFields[1], 'bytes') else 0)
                      }">
                      <xs:annotation>
                        <xs:appinfo source="http://www.ogf.org/dfdl/">
                          <dfdl:assert message="FileLength of 9999 (unknown reserved extension header length when header was created) is not supported." test="{ . ne 9999 }" />
                        </xs:appinfo>
                      </xs:annotation>
                    </xs:element>
                    <xs:element name="DataLength" type="nitfc:BCS-NP" dfdl:length="7" dfdl:outputValueCalc="{ dfdl:valueLength(../../../ReservedExtensionSegment[dfdl:occursIndex()]/Data, 'bytes') }">
                      <xs:annotation>
                        <xs:appinfo source="http://www.ogf.org/dfdl/">
                          <dfdl:assert message="FileLength of 9999999 (unknown reserved extension data length when header was created) is not supported." test="{ . ne 9999999 }" />
                        </xs:appinfo>
                      </xs:annotation>
                    </xs:element>
                  </xs:sequence>
                </xs:complexType>
              </xs:element>
              <xs:element name="UserDefinedHeaderDataLength" type="nitfc:BCS-NP" dfdl:length="5" dfdl:outputValueCalc="{
                if (fn:exists(../UserDefinedHeaderData)) then dfdl:valueLength(../UserDefinedHeaderData[1]/nitf:TaggedRecordExtensions, 'bytes') + 3 else 0
                }"/>
              <xs:element name="UserDefinedHeaderOverflow" minOccurs="0" type="nitfc:BCS-NP" dfdl:length="3" dfdl:occursCountKind="expression" dfdl:occursCount="{ if (../UserDefinedHeaderDataLength eq 0) then 0 else 1 }" />
              <xs:element name="UserDefinedHeaderData" minOccurs="0" dfdl:occursCountKind="expression" dfdl:occursCount="{ if (../UserDefinedHeaderDataLength eq 0) then 0 else 1 }" dfdl:lengthKind="explicit" dfdl:length="{ ../UserDefinedHeaderDataLength - 3 }">
                <xs:complexType>
                  <xs:sequence>
                    <xs:element ref="nitf:TaggedRecordExtensions" />
                  </xs:sequence>
                </xs:complexType>
              </xs:element>
              <xs:element name="ExtendedHeaderDataLength" type="nitfc:BCS-NP" dfdl:length="5" dfdl:outputValueCalc="{
                if (fn:exists(../ExtendedHeaderData)) then dfdl:valueLength(../ExtendedHeaderData[1]/nitf:TaggedRecordExtensions, 'bytes') + 3 else 0
                }"/>
              <xs:element name="ExtendedHeaderDataOverflow" minOccurs="0" type="nitfc:BCS-NP" dfdl:length="3" dfdl:occursCountKind="expression" dfdl:occursCount="{ if (../ExtendedHeaderDataLength eq 0) then 0 else 1 }" />
              <xs:element name="ExtendedHeaderData" minOccurs="0" dfdl:occursCountKind="expression" dfdl:occursCount="{ if (../ExtendedHeaderDataLength eq 0) then 0 else 1 }" dfdl:lengthKind="explicit" dfdl:length="{ ../ExtendedHeaderDataLength - 3 }">
                <xs:complexType>
                  <xs:sequence>
                    <xs:element ref="nitf:TaggedRecordExtensions" />
                  </xs:sequence>
                </xs:complexType>
              </xs:element>
            </xs:sequence>
          </xs:complexType>
        </xs:element>

        <xs:element name="ImageSegment" minOccurs="0" maxOccurs="999" dfdl:occursCountKind="expression" dfdl:occursCount="{ ../Header/NumberOfImageSegments }">
          <xs:complexType>
            <xs:sequence>
              <xs:element name="Header" dfdl:lengthKind="explicit" dfdl:length="{ ../../Header/ImageSegmentLengths[dfdl:occursIndex()]/HeaderLength }">
                <xs:complexType>
                  <xs:sequence>
                    <xs:element name="FilePartType" type="nitfc:BCS-A" dfdl:length="2" />
                    <xs:element name="ImageIdentifier1" type="nitfc:BCS-A" dfdl:length="10" />
                    <xs:element name="ImageDateAndTime" type="nitfc:dateTime" />
                    <xs:element name="TargetIdentifier">
                      <xs:complexType>
                        <xs:sequence>
                          <xs:element name="BasicEncyclopediaIdentifier" type="nitfc:BCS-A" dfdl:length="10" nillable="true" dfdl:ref="nitfc:nilString" />
                          <xs:element name="FacilityOSuffix" type="nitfc:BCS-A" dfdl:length="5" nillable="true" dfdl:ref="nitfc:nilString" />
                          <xs:element name="CountryCode" type="nitfc:BCS-A" dfdl:length="2" nillable="true" dfdl:ref="nitfc:nilString" />
                        </xs:sequence>
                      </xs:complexType>
                    </xs:element>
                    <xs:element name="ImageIdentifier2" type="nitfc:BCS-A" dfdl:length="80" nillable="true" dfdl:ref="nitfc:nilString" />
                    <xs:element name="ClassificationInformation" type="nitf:classificationInfo" />
                    <xs:element name="Encryption" type="nitfc:BCS-NP" dfdl:length="1" />
                    <xs:element name="ImageSource" type="nitfc:BCS-A" dfdl:length="42" nillable="true" dfdl:ref="nitfc:nilString" />
                    <xs:element name="NumberOfSignificantRowsInImage" type="nitfc:BCS-NP" dfdl:length="8" />
                    <xs:element name="NumberOfSignificantColumnsInImage" type="nitfc:BCS-NP" dfdl:length="8" />
                    <xs:element name="PixelValueType" type="nitfc:BCS-A" dfdl:length="3" />
                    <xs:element name="ImageRepresentation" type="nitfc:BCS-A" dfdl:length="8" />
                    <xs:element name="ImageCategory" type="nitfc:BCS-A" dfdl:length="8" />
                    <xs:element name="ActualBitsPerPixelPerBand" type="nitfc:BCS-NP" dfdl:length="2" />
                    <xs:element name="PixelJustification" type="nitfc:BCS-A" dfdl:length="1" />
                    <xs:element name="ImageCoordinateRepresentation" type="nitfc:BCS-A" dfdl:length="1" nillable="true" dfdl:ref="nitfc:nilString" dfdl:outputValueCalc="{
                      if (fn:exists(../ImageGeographicLocation)) then
                        if (fn:exists(../ImageGeographicLocation/MilitaryGridReferenceSystem)) then 'U'
                        else if (fn:exists(../ImageGeographicLocation/NorthernHemisphere)) then 'N'
                        else if (fn:exists(../ImageGeographicLocation/SouthernHemisphere)) then 'S'
                        else if (fn:exists(../ImageGeographicLocation/Geographic)) then 'G'
                        else if (fn:exists(../ImageGeographicLocation/DecimalDegrees)) then 'D'
                        else fn:error('nitf', 'fn:error called.', .)
                      else ' '
                    }"/>
                    <xs:element name="ImageGeographicLocation" minOccurs="0" dfdl:lengthKind="explicit" dfdl:length="60">
                      <xs:complexType>
                        <xs:choice>
                          <xs:element name="MilitaryGridReferenceSystem"> <!-- zzBJKeeeeennnnn -->
                            <xs:complexType>
                              <xs:sequence>
                                <xs:sequence>
                                  <xs:annotation>
                                    <xs:appinfo source="http://www.ogf.org/dfdl/">
                                      <dfdl:discriminator test="{ fn:not(fn:nilled(../../ImageCoordinateRepresentation)) and (../../ImageCoordinateRepresentation eq 'U') }" />
                                    </xs:appinfo>
                                  </xs:annotation>
                                </xs:sequence>
                                <xs:element name="Corner" minOccurs="4" maxOccurs="4" dfdl:occursCountKind="fixed">
                                  <xs:complexType>
                                    <xs:sequence>
                                      <xs:element name="Zone" type="nitfc:BCS-A" dfdl:length="2" />
                                      <xs:element name="Band" type="nitfc:BCS-A" dfdl:length="1" />
                                      <xs:element name="J" type="nitfc:BCS-A" dfdl:length="1" />
                                      <xs:element name="K" type="nitfc:BCS-A" dfdl:length="1" />
                                      <xs:element name="Easting" type="nitfc:BCS-A" dfdl:length="5" />
                                      <xs:element name="Northing" type="nitfc:BCS-A" dfdl:length="5" />
                                    </xs:sequence>
                                  </xs:complexType>
                                </xs:element>
                              </xs:sequence>
                            </xs:complexType>
                          </xs:element>
                          <xs:element name="NorthernHemisphere"> <!-- zzeeeeeennnnnnn -->
                            <xs:complexType>
                              <xs:sequence>
                                <xs:sequence>
                                  <xs:annotation>
                                    <xs:appinfo source="http://www.ogf.org/dfdl/">
                                      <dfdl:discriminator test="{ fn:not(fn:nilled(../../ImageCoordinateRepresentation)) and (../../ImageCoordinateRepresentation eq 'N') }" />
                                    </xs:appinfo>
                                  </xs:annotation>
                                </xs:sequence>
                                <xs:element name="Corner" minOccurs="4" maxOccurs="4" dfdl:occursCountKind="fixed">
                                  <xs:complexType>
                                    <xs:sequence>
                                      <xs:element name="Zone" type="nitfc:BCS-A" dfdl:length="2" />
                                      <xs:element name="Easting" type="nitfc:BCS-A" dfdl:length="6" />
                                      <xs:element name="Northing" type="nitfc:BCS-A" dfdl:length="7" />
                                    </xs:sequence>
                                  </xs:complexType>
                                </xs:element>
                              </xs:sequence>
                            </xs:complexType>
                          </xs:element>
                          <xs:element name="SouthernHemisphere"> <!-- zzeeeeeennnnnnn -->
                            <xs:complexType>
                              <xs:sequence>
                                <xs:sequence>
                                  <xs:annotation>
                                    <xs:appinfo source="http://www.ogf.org/dfdl/">
                                      <dfdl:discriminator test="{ fn:not(fn:nilled(../../ImageCoordinateRepresentation)) and (../../ImageCoordinateRepresentation eq 'S') }" />
                                    </xs:appinfo>
                                  </xs:annotation>
                                </xs:sequence>
                                <xs:element name="Corner" minOccurs="4" maxOccurs="4" dfdl:occursCountKind="fixed">
                                  <xs:complexType>
                                    <xs:sequence>
                                      <xs:element name="Zone" type="nitfc:BCS-A" dfdl:length="2" />
                                      <xs:element name="Easting" type="nitfc:BCS-A" dfdl:length="6" />
                                      <xs:element name="Northing" type="nitfc:BCS-A" dfdl:length="7" />
                                    </xs:sequence>
                                  </xs:complexType>
                                </xs:element>
                              </xs:sequence>
                            </xs:complexType>
                          </xs:element>
                          <xs:element name="Geographic"> <!-- ddmmssXddmmssY -->
                            <xs:complexType>
                              <xs:sequence>
                                <xs:sequence>
                                  <xs:annotation>
                                    <xs:appinfo source="http://www.ogf.org/dfdl/">
                                      <dfdl:discriminator test="{ fn:not(fn:nilled(../../ImageCoordinateRepresentation)) and (../../ImageCoordinateRepresentation eq 'G') }" />
                                    </xs:appinfo>
                                  </xs:annotation>
                                </xs:sequence>
                                <xs:element name="Corner" minOccurs="4" maxOccurs="4" dfdl:occursCountKind="fixed">
                                  <xs:complexType>
                                    <xs:sequence>
                                      <xs:element name="Latitude">
                                        <xs:complexType>
                                          <xs:sequence>
                                            <xs:element name="Degrees" type="nitfc:BCS-A" dfdl:length="2" />
                                            <xs:element name="Minutes" type="nitfc:BCS-A" dfdl:length="2" />
                                            <xs:element name="Seconds" type="nitfc:BCS-A" dfdl:length="2" />
                                            <xs:element name="NorthSouth" type="nitfc:BCS-A" dfdl:length="1" />
                                          </xs:sequence>
                                        </xs:complexType>
                                      </xs:element>
                                      <xs:element name="Longitude">
                                        <xs:complexType>
                                          <xs:sequence>
                                            <xs:element name="Degrees" type="nitfc:BCS-A" dfdl:length="3" />
                                            <xs:element name="Minutes" type="nitfc:BCS-A" dfdl:length="2" />
                                            <xs:element name="Seconds" type="nitfc:BCS-A" dfdl:length="2" />
                                            <xs:element name="EastWest" type="nitfc:BCS-A" dfdl:length="1" />
                                          </xs:sequence>
                                        </xs:complexType>
                                      </xs:element>
                                    </xs:sequence>
                                  </xs:complexType>
                                </xs:element>
                              </xs:sequence>
                            </xs:complexType>
                          </xs:element>
                          <xs:element name="DecimalDegrees"> <!-- +-dd.ddd+-ddd.ddd -->
                            <xs:complexType>
                              <xs:sequence>
                                <xs:sequence>
                                  <xs:annotation>
                                    <xs:appinfo source="http://www.ogf.org/dfdl/">
                                      <dfdl:discriminator test="{ fn:not(fn:nilled(../../ImageCoordinateRepresentation)) and (../../ImageCoordinateRepresentation eq 'D') }" />
                                    </xs:appinfo>
                                  </xs:annotation>
                                </xs:sequence>
                                <xs:element name="Corner" minOccurs="4" maxOccurs="4" dfdl:occursCountKind="fixed">
                                  <xs:complexType>
                                    <xs:sequence>
                                      <xs:element name="Latitude" type="nitfc:BCS-A" dfdl:length="7" />
                                      <xs:element name="Longitude" type="nitfc:BCS-A" dfdl:length="8" />
                                    </xs:sequence>
                                  </xs:complexType>
                                </xs:element>
                              </xs:sequence>
                            </xs:complexType>
                          </xs:element>
                        </xs:choice>
                      </xs:complexType>
                    </xs:element>
                    <xs:element name="NumberOfImageComments" type="nitfc:BCS-NP" dfdl:length="1" dfdl:outputValueCalc="{ fn:count(../ImageComment) }" />
                    <xs:element name="ImageComment" minOccurs="0" maxOccurs="9" type="nitfc:ECS-A" dfdl:occursCountKind="expression" dfdl:occursCount="{ ../NumberOfImageComments }" dfdl:length="80" />
                    <xs:element name="ImageCompression" type="nitfc:BCS-A" dfdl:length="2" />
                    <xs:element name="CompressionRateCode" type="nitfc:BCS-A" minOccurs="0" dfdl:length="4" dfdl:occursCountKind="expression"
                                dfdl:occursCount="{
                           if ((../ImageCompression eq 'C1') or (../ImageCompression eq 'C3') or (../ImageCompression eq 'C4') or
                               (../ImageCompression eq 'C5') or (../ImageCompression eq 'C8') or (../ImageCompression eq 'M1') or
                               (../ImageCompression eq 'M3') or (../ImageCompression eq 'M4') or (../ImageCompression eq 'M5') or
                               (../ImageCompression eq 'M8') or (../ImageCompression eq 'I1'))
                           then 1
                           else 0
                         }" />
                    <xs:element name="NumberOfBands" type="nitfc:BCS-NP" dfdl:length="1" dfdl:outputValueCalc="{ if (fn:count(../Bands/Band) le 9) then fn:count(../Bands/Band) else 0  }" />
                    <xs:element name="NumberOfMultispectralBands" minOccurs="0" dfdl:occursCountKind="expression" dfdl:occursCount="{ if (../NumberOfBands eq 0) then 1 else 0 }">
                      <xs:complexType>
                        <xs:sequence>
                          <xs:element name="Value" type="nitfc:BCS-NP" dfdl:length="5" dfdl:outputValueCalc="{ if (fn:count(../../Bands/Band) gt 9) then fn:count(../../Bands/Band) else fn:error('nitf', 'fn:error called.', .) }" />
                        </xs:sequence>
                      </xs:complexType>
                    </xs:element>
                    <xs:element name="Bands">
                      <xs:complexType>
                        <xs:sequence>
                          <xs:element name="Band" minOccurs="1" maxOccurs="99999" dfdl:occursCountKind="expression" dfdl:occursCount="{ if (fn:exists(../../NumberOfMultispectralBands)) then ../../NumberOfMultispectralBands[1]/Value else ../../NumberOfBands }">
                            <xs:complexType>
                              <xs:sequence>
                                <xs:element name="Representation" type="nitfc:BCS-A" dfdl:length="2" nillable="true" dfdl:ref="nitfc:nilString" />
                                <xs:element name="Subcategory" type="nitfc:BCS-A" dfdl:length="6" nillable="true" dfdl:ref="nitfc:nilString" />
                                <xs:element name="ImageFilterCondition" type="nitfc:BCS-A" dfdl:length="1" />
                                <xs:element name="StandardImageFilterCode" type="nitfc:BCS-A" dfdl:length="3" nillable="true" dfdl:ref="nitfc:nilString" />
                                <xs:element name="NumberOfLUTS" type="nitfc:BCS-NP" dfdl:length="1" dfdl:outputValueCalc="{ fn:count(../LUT) }"/>
                                <xs:element name="NumberOfLUTEntries" minOccurs="0" dfdl:occursCountKind="expression" dfdl:occursCount="{ if (../NumberOfLUTS eq 0) then 0 else 1 }">
                                  <xs:complexType>
                                    <xs:sequence>
                                      <xs:element name="Value" type="nitfc:BCS-NP" dfdl:length="5" dfdl:outputValueCalc="{ dfdl:valueLength(../../LUT[1], 'bytes') }" />
                                    </xs:sequence>
                                  </xs:complexType>
                                </xs:element>
                                <xs:element name="LUT" type="xs:hexBinary" minOccurs="0" maxOccurs="4" dfdl:occursCountKind="expression" dfdl:occursCount="{ ../NumberOfLUTS }" dfdl:lengthKind="explicit" dfdl:length="{ ../NumberOfLUTEntries[1]/Value }" />
                              </xs:sequence>
                            </xs:complexType>
                          </xs:element>
                        </xs:sequence>
                      </xs:complexType>
                    </xs:element>
                    <xs:element name="ImageSyncCode" type="nitfc:BCS-NP" dfdl:length="1" />
                    <xs:element name="ImageMode" type="nitfc:BCS-A" dfdl:length="1" />
                    <xs:element name="NumberOfBlocksPerRow" type="nitfc:BCS-NP" dfdl:length="4" />
                    <xs:element name="NumberOfBlocksPerColumn" type="nitfc:BCS-NP" dfdl:length="4" />
                    <xs:element name="NumberOfPixelsPerBlockHorizontal" type="nitfc:BCS-NP" dfdl:length="4" />
                    <xs:element name="NumberOfPixelsPerBlockVertical" type="nitfc:BCS-NP" dfdl:length="4" />
                    <xs:element name="NumberOfBitsPerPixelPerBand" type="nitfc:BCS-NP" dfdl:length="2" />
                    <xs:element name="ImageDisplayLevel" type="nitfc:BCS-NP" dfdl:length="3" />
                    <xs:element name="AttachmentLevel" type="nitfc:BCS-NP" dfdl:length="3" />
                    <xs:element name="ImageLocation">
                      <xs:complexType>
                        <xs:sequence>
                          <xs:element name="Row" type="nitfc:BCS-N" dfdl:length="5" />
                          <xs:element name="Column" type="nitfc:BCS-N" dfdl:length="5" />
                        </xs:sequence>
                      </xs:complexType>
                    </xs:element>
                    <xs:element name="ImageMagnification" type="nitfc:BCS-A" dfdl:length="4" />
                    <xs:element name="UserDefinedImageDataLength" type="nitfc:BCS-NP" dfdl:length="5" dfdl:outputValueCalc="{
                      if (fn:exists(../UserDefinedImageData)) then dfdl:valueLength(../UserDefinedImageData[1]/nitf:TaggedRecordExtensions, 'bytes') + 3 else 0
                      }" />
                    <xs:element name="UserDefinedOverflow" type="nitfc:BCS-NP" minOccurs="0" dfdl:length="3" dfdl:occursCountKind="expression" dfdl:occursCount="{ if (../UserDefinedImageDataLength eq 0) then 0 else 1 }" />
                    <xs:element name="UserDefinedImageData" minOccurs="0" dfdl:lengthKind="explicit" dfdl:length="{ ../UserDefinedImageDataLength - 3 }" dfdl:occursCountKind="expression" dfdl:occursCount="{ if (../UserDefinedImageDataLength eq 0) then 0 else 1 }">
                      <xs:complexType>
                        <xs:sequence>
                          <xs:element ref="nitf:TaggedRecordExtensions" />
                        </xs:sequence>
                      </xs:complexType>
                    </xs:element>
                    <xs:element name="ImageExtendedSubheaderDataLength" type="nitfc:BCS-NP" dfdl:length="5" dfdl:outputValueCalc="{
                      if (fn:exists(../ImageExtendedSubheaderData)) then dfdl:valueLength(../ImageExtendedSubheaderData[1]/nitf:TaggedRecordExtensions, 'bytes') + 3 else 0
                      }" />
                    <xs:element name="ImageExtendedSubheaderOverflow" type="nitfc:BCS-NP" minOccurs="0" dfdl:length="3" dfdl:occursCountKind="expression" dfdl:occursCount="{ if (../ImageExtendedSubheaderDataLength eq 0) then 0 else 1 }" />
                    <xs:element name="ImageExtendedSubheaderData" minOccurs="0" dfdl:lengthKind="explicit" dfdl:length="{ ../ImageExtendedSubheaderDataLength - 3 }" dfdl:occursCountKind="expression" dfdl:occursCount="{ if (../ImageExtendedSubheaderDataLength eq 0) then 0 else 1 }">
                      <xs:complexType>
                        <xs:sequence>
                          <xs:element ref="nitf:TaggedRecordExtensions" />
                        </xs:sequence>
                      </xs:complexType>
                    </xs:element>
                  </xs:sequence>
                </xs:complexType>
              </xs:element>
              <xs:element name="Data" type="nitfx:imageData" dfdl:lengthKind="explicit" dfdl:length="{ ../../Header/ImageSegmentLengths[dfdl:occursIndex()]/DataLength }" />
            </xs:sequence>
          </xs:complexType>
        </xs:element>

        <xs:element name="GraphicSegment" minOccurs="0" maxOccurs="999" dfdl:occursCountKind="expression" dfdl:occursCount="{ ../Header/NumberOfGraphicSegments }">
          <xs:complexType>
            <xs:sequence>
              <xs:element name="Header" dfdl:lengthKind="explicit" dfdl:length="{ ../../Header/GraphicSegmentLengths[dfdl:occursIndex()]/HeaderLength }">
                <xs:complexType>
                  <xs:sequence>
                    <xs:element name="FilePartType" type="nitfc:BCS-A" dfdl:length="2" />
                    <xs:element name="GraphicIdentifier" type="nitfc:BCS-A" dfdl:length="10" />
                    <xs:element name="GraphicName" type="nitfc:ECS-A" dfdl:length="20" />
                    <xs:element name="ClassificationInformation" type="nitf:classificationInfo" />
                    <xs:element name="Encryption" type="nitfc:BCS-NP" dfdl:length="1" />
                    <xs:element name="GraphicType" type="nitfc:BCS-A" dfdl:length="1" />
                    <xs:element name="ReservedForFutureUse1" type="nitfc:BCS-NPbig" dfdl:length="13" />
                    <xs:element name="GraphicDisplayLevel" type="nitfc:BCS-NP" dfdl:length="3" />
                    <xs:element name="GraphicAttachmentLevel" type="nitfc:BCS-NP" dfdl:length="3" />
                    <xs:element name="GraphicLocation">
                      <xs:complexType>
                        <xs:sequence>
                          <xs:element name="Row" type="nitfc:BCS-N" dfdl:length="5" />
                          <xs:element name="Column" type="nitfc:BCS-N" dfdl:length="5" />
                        </xs:sequence>
                      </xs:complexType>
                    </xs:element>
                    <xs:element name="FirstGraphicBoundLocation">
                      <xs:complexType>
                        <xs:sequence>
                          <xs:element name="Row" type="nitfc:BCS-N" dfdl:length="5" />
                          <xs:element name="Column" type="nitfc:BCS-N" dfdl:length="5" />
                        </xs:sequence>
                      </xs:complexType>
                    </xs:element>
                    <xs:element name="GraphicColor" type="nitfc:BCS-A" dfdl:length="1" />
                    <xs:element name="SecondGraphicBoundLocation">
                      <xs:complexType>
                        <xs:sequence>
                          <xs:element name="Row" type="nitfc:BCS-N" dfdl:length="5" />
                          <xs:element name="Column" type="nitfc:BCS-N" dfdl:length="5" />
                        </xs:sequence>
                      </xs:complexType>
                    </xs:element>
                    <xs:element name="ReservedForFutureUse2" type="nitfc:BCS-NP" dfdl:length="2" />
                    <xs:element name="GraphicExtendedSubheaderDataLength" type="nitfc:BCS-NP" dfdl:length="5" dfdl:outputValueCalc="{
                      if (fn:exists(../GraphicExtendedSubheaderData)) then dfdl:valueLength(../GraphicExtendedSubheaderData[1]/nitf:TaggedRecordExtensions, 'bytes') + 3 else 0
                      }" />
                    <xs:element name="GraphicExtendedSubheaderOverflow" minOccurs="0" type="nitfc:BCS-NP" dfdl:length="3" dfdl:occursCountKind="expression" dfdl:occursCount="{ if (../GraphicExtendedSubheaderDataLength eq 0) then 0 else 1 }" />
                    <xs:element name="GraphicExtendedSubheaderData" minOccurs="0" dfdl:occursCountKind="expression" dfdl:occursCount="{ if (../GraphicExtendedSubheaderDataLength eq 0) then 0 else 1 }" dfdl:lengthKind="explicit" dfdl:length="{ ../GraphicExtendedSubheaderDataLength - 3 }">
                      <xs:complexType>
                        <xs:sequence>
                          <xs:element ref="nitf:TaggedRecordExtensions" />
                        </xs:sequence>
                      </xs:complexType>
                    </xs:element>
                  </xs:sequence>
                </xs:complexType>
              </xs:element>
              <xs:element name="Data" type="xs:hexBinary" dfdl:lengthKind="explicit" dfdl:length="{ ../../Header/GraphicSegmentLengths[dfdl:occursIndex()]/DataLength }" />
            </xs:sequence>
          </xs:complexType>
        </xs:element>

        <xs:element name="TextSegment" minOccurs="0" maxOccurs="999" dfdl:occursCountKind="expression" dfdl:occursCount="{ ../Header/NumberOfTextSegments }">
          <xs:complexType>
            <xs:sequence>
              <xs:element name="Header" dfdl:lengthKind="explicit" dfdl:length="{ ../../Header/TextSegmentLengths[dfdl:occursIndex()]/HeaderLength }">
                <xs:complexType>
                  <xs:sequence>
                    <xs:element name="FilePartType" type="nitfc:BCS-A" dfdl:length="2" />
                    <xs:element name="TextIdentifier" type="nitfc:BCS-A" dfdl:length="7" />
                    <xs:element name="TextAttachmentLevel" type="nitfc:BCS-NP" dfdl:length="3" />
                    <xs:element name="TextDateAndTime" type="nitfc:dateTime" />
                    <xs:element name="TextTitle" type="nitfc:ECS-A" dfdl:length="80" />
                    <xs:element name="ClassificationInformation" type="nitf:classificationInfo" />
                    <xs:element name="Encryption" type="nitfc:BCS-NP" dfdl:length="1" />
                    <xs:element name="TextFormat" type="nitfc:BCS-A" dfdl:length="3" />
                    <xs:element name="TextExtendedSubheaderDataLength" type="nitfc:BCS-NP" dfdl:length="5" dfdl:outputValueCalc="{
                      if (fn:exists(../TextExtendedSubheaderData)) then dfdl:valueLength(../TextExtendedSubheaderData[1]/nitf:TaggedRecordExtensions, 'bytes') + 3 else 0
                      }" />
                    <xs:element name="TextExtendedSubheaderOverflow" minOccurs="0" type="nitfc:BCS-NP" dfdl:length="3" dfdl:occursCountKind="expression" dfdl:occursCount="{ if (../TextExtendedSubheaderDataLength eq 0) then 0 else 1 }" />
                    <xs:element name="TextExtendedSubheaderData" minOccurs="0" dfdl:occursCountKind="expression" dfdl:occursCount="{ if (../TextExtendedSubheaderDataLength eq 0) then 0 else 1 }" dfdl:lengthKind="explicit" dfdl:length="{ ../TextExtendedSubheaderDataLength - 3 }">
                      <xs:complexType>
                        <xs:sequence>
                          <xs:element ref="nitf:TaggedRecordExtensions" />
                        </xs:sequence>
                      </xs:complexType>
                    </xs:element>
                  </xs:sequence>
                </xs:complexType>
              </xs:element>
              <xs:element name="Data" type="xs:string" dfdl:lengthKind="explicit" dfdl:length="{ ../../Header/TextSegmentLengths[dfdl:occursIndex()]/DataLength }" dfdl:encoding="ISO-8859-1"/>
            </xs:sequence>
          </xs:complexType>
        </xs:element>

        <xs:element name="DataExtensionSegment" minOccurs="0" maxOccurs="999" dfdl:occursCountKind="expression" dfdl:occursCount="{ ../Header/NumberOfDataExtensionSegments }">
          <xs:complexType>
            <xs:sequence>
              <xs:element name="Header" dfdl:lengthKind="explicit" dfdl:length="{ ../../Header/DataExtensionSegmentLengths[dfdl:occursIndex()]/HeaderLength }">
                <xs:complexType>
                  <xs:sequence>
                    <xs:element name="FilePartType" type="nitfc:BCS-A" dfdl:length="2" />
                    <xs:element name="UniqueDESTypeIdentifier" type="nitfc:BCS-A" dfdl:length="25" />
                    <xs:element name="VersionOfTheDataDefinition" type="nitfc:BCS-NP" dfdl:length="2" />
                    <xs:element name="ClassificationInformation" type="nitf:classificationInfo" />
                    <xs:element name="DESOverflowedHeaderType" type="nitfc:BCS-A" minOccurs="0" dfdl:length="6" dfdl:occursCountKind="expression"
                                dfdl:occursCount="{ if ((../UniqueDESTypeIdentifier eq 'TRE_OVERFLOW') or (../UniqueDESTypeIdentifier eq 'Registered Extensions')) then 1 else 0 }" />
                    <xs:element name="DESDataItemOverflowed" type="nitfc:BCS-NP" minOccurs="0" dfdl:length="3" dfdl:occursCountKind="expression" dfdl:occursCount="{ if (fn:exists(../DESOverflowedHeaderType)) then 1 else 0 }" />
                    <xs:element name="DESUserDefinedSubheaderLength" type="nitfc:BCS-NP" dfdl:length="4" dfdl:outputValueCalc="{
                      if (fn:exists(../DESUserDefinedSubheaderFields)) then dfdl:valueLength(../DESUserDefinedSubheaderFields[1], 'bytes') else 0
                      }" />
                    <xs:element name="DESUserDefinedSubheaderFields" type="xs:hexBinary" minOccurs="0" dfdl:lengthKind="explicit" dfdl:length="{ ../DESUserDefinedSubheaderLength }" dfdl:occursCountKind="expression" dfdl:occursCount="{ if (../DESUserDefinedSubheaderLength eq 0) then 0 else 1 }" />
                  </xs:sequence>
                </xs:complexType>
              </xs:element>
              <xs:element name="Data" dfdl:lengthKind="explicit" dfdl:length="{ ../../Header/DataExtensionSegmentLengths[dfdl:occursIndex()]/DataLength }">
                <xs:complexType>
                  <xs:choice>
                    <xs:element ref="nitf:TaggedRecordExtensions">
                      <xs:annotation>
                        <xs:appinfo source="http://www.ogf.org/dfdl/">
                          <dfdl:discriminator test="{ ../../Header/UniqueDESTypeIdentifier eq 'TRE_OVERFLOW' }" />
                        </xs:appinfo>
                      </xs:annotation>
                    </xs:element>
                    <xs:element name="DESUserDefinedData" type="xs:hexBinary" dfdl:lengthKind="explicit" dfdl:length="{ ../../../Header/DataExtensionSegmentLengths[dfdl:occursIndex()]/DataLength }" />
                  </xs:choice>
                </xs:complexType>
              </xs:element>
            </xs:sequence>
          </xs:complexType>
        </xs:element>

        <xs:element name="ReservedExtensionSegment" minOccurs="0" maxOccurs="999" dfdl:occursCountKind="expression" dfdl:occursCount="{ ../Header/NumberOfReservedExtensionSegments }">
          <xs:complexType>
            <xs:sequence>
              <xs:element name="Header" dfdl:lengthKind="explicit" dfdl:length="{ ../../Header/ReservedExtensionSegmentLengths[dfdl:occursIndex()]/HeaderLength }">
                <xs:complexType>
                  <xs:sequence>
                    <xs:element name="FilePartType" type="nitfc:BCS-A" dfdl:length="2" />
                    <xs:element name="UniqueRESTypeIdentifier" type="nitfc:BCS-A" dfdl:length="25" />
                    <xs:element name="VersionOfTheDataDefinition" type="nitfc:BCS-NP" dfdl:length="2" />
                    <xs:element name="ClassificationInformation" type="nitf:classificationInfo" />
                    <xs:element name="RESUserDefinedSubheaderLength" type="nitfc:BCS-NP" dfdl:length="4" dfdl:outputValueCalc="{
                      if (fn:exists(../RESUserDefinedSubheaderFields)) then dfdl:valueLength(../RESUserDefinedSubheaderFields[1], 'bytes') else 0
                      }" />
                    <xs:element name="RESUserDefinedSubheaderFields" type="xs:hexBinary" minOccurs="0" dfdl:lengthKind="explicit" dfdl:length="{ ../RESUserDefinedSubheaderLength }" dfdl:occursCountKind="expression" dfdl:occursCount="{ if (../RESUserDefinedSubheaderLength eq 0) then 0 else 1 }" />
                  </xs:sequence>
                </xs:complexType>
              </xs:element>
              <xs:element name="Data" dfdl:lengthKind="explicit" dfdl:length="{ ../../Header/ReservedExtensionSegmentLengths[dfdl:occursIndex()]/DataLength }">
                <xs:complexType>
                  <xs:sequence>
                    <xs:element name="RESUserDefinedData" type="xs:hexBinary" dfdl:lengthKind="explicit" dfdl:length="{ ../../../Header/ReservedExtensionSegmentLengths[dfdl:occursIndex()]/DataLength }" />
                  </xs:sequence>
                </xs:complexType>
              </xs:element>
            </xs:sequence>
          </xs:complexType>
        </xs:element>

      </xs:sequence>
    </xs:complexType>
  </xs:element>

  <xs:complexType name="classificationInfo">
    <xs:sequence>
      <xs:element name="SecurityClassification" dfdl:length="1">
        <xs:simpleType>
          <xs:restriction base="nitfc:ECS-A">
            <xs:enumeration value="T"/>
            <xs:enumeration value="S"/>
            <xs:enumeration value="C"/>
            <xs:enumeration value="R"/>
            <xs:enumeration value="U"/>
          </xs:restriction>
        </xs:simpleType>
      </xs:element>
      <xs:choice dfdl:choiceDispatchKey="{ $nitf:nitfVersion }">
        <xs:sequence dfdl:choiceBranchKey="02.10">
          <!-- TODO: all these classificiation fields are validated based on FileSecurityClassification and other information -->
          <xs:element name="SecurityClassificationSystem" type="nitfc:ECS-A" dfdl:length="2" nillable="true" dfdl:ref="nitfc:nilString" />
          <xs:element name="Codewords" type="nitfc:BCS-A" dfdl:length="11" nillable="true" dfdl:ref="nitfc:nilString" />
          <xs:element name="ControlAndHandling" type="nitfc:ECS-A" dfdl:length="2" nillable="true" dfdl:ref="nitfc:nilString" />
          <xs:element name="ReleasingInstructions" type="nitfc:ECS-A" dfdl:length="20" nillable="true" dfdl:ref="nitfc:nilString" />
          <xs:element name="DeclassificationType" type="nitfc:ECS-A" dfdl:length="2" nillable="true" dfdl:ref="nitfc:nilString" />
          <xs:element name="DeclassificationDate" type="nitfc:date" nillable="true" dfdl:ref="nitfc:nilDate" />
          <xs:element name="DeclassificationExemption" type="nitfc:ECS-A" dfdl:length="4" nillable="true" dfdl:ref="nitfc:nilString" />
          <xs:element name="Downgrade" type="nitfc:ECS-A" dfdl:length="1" nillable="true" dfdl:ref="nitfc:nilString" />
          <xs:element name="DowngradeDate" type="nitfc:date" nillable="true" dfdl:ref="nitfc:nilDate" />
          <xs:element name="ClassificationText" type="nitfc:ECS-A" dfdl:length="43" nillable="true" dfdl:ref="nitfc:nilString" />
          <xs:element name="ClassificationAuthorityType" type="nitfc:ECS-A" dfdl:length="1" nillable="true" dfdl:ref="nitfc:nilString" />
          <xs:element name="ClassificationAuthority" type="nitfc:ECS-A" dfdl:length="40" nillable="true" dfdl:ref="nitfc:nilString" />
          <xs:element name="ClassificationReason" type="nitfc:ECS-A" dfdl:length="1" nillable="true" dfdl:ref="nitfc:nilString" />
          <xs:element name="SecuritySourceDate" type="nitfc:date" nillable="true" dfdl:ref="nitfc:nilDate" />
          <xs:element name="SecurityControlNumber" type="nitfc:ECS-A" dfdl:length="15" nillable="true" dfdl:ref="nitfc:nilString" />
        </xs:sequence>
        <xs:sequence dfdl:choiceBranchKey="02.00">
          <xs:element name="Codewords" type="nitfc:BCS-A" dfdl:length="40" nillable="true" dfdl:ref="nitfc:nilString" />
          <xs:element name="ControlAndHandling" type="nitfc:ECS-A" dfdl:length="40" nillable="true" dfdl:ref="nitfc:nilString" />
          <xs:element name="ReleasingInstructions" type="nitfc:ECS-A" dfdl:length="40" nillable="true" dfdl:ref="nitfc:nilString" />
          <xs:element name="ClassificationAuthority" type="nitfc:ECS-A" dfdl:length="20" nillable="true" dfdl:ref="nitfc:nilString" />
          <xs:element name="SecurityControlNumber" type="nitfc:ECS-A" dfdl:length="20" nillable="true" dfdl:ref="nitfc:nilString" />
          <xs:element name="Downgrade" type="nitfc:ECS-A" dfdl:length="6" nillable="true" dfdl:ref="nitfc:nilString" />
          <!--<xs:element name="DowngradeEvent" type="nitfc:ECS-A" dfdl:length="40" nillable="true" dfdl:ref="nitfc:nilString"
          minOccurs="0" dfdl:occursCountKind="expression" dfdl:occursCount="{ if (fn:nilled(../Downgrade)) then 0 else if (../Downgrade eq '999998') then 1 else 0 }" />-->
          <!-- This choice shouldn't be necessary, but having an optional element
               at the end of a choice branch triggers an unparse error see
               DAFFODIL-2562 -->
          <xs:choice dfdl:choiceDispatchKey="{ if (fn:nilled(Downgrade)) then 'missing' else if (Downgrade eq '999998') then 'present' else 'missing' }">
            <xs:sequence dfdl:choiceBranchKey="present">
              <xs:element name="DowngradeEvent" type="nitfc:ECS-A" dfdl:length="40" nillable="true" dfdl:ref="nitfc:nilString" />
            </xs:sequence>
            <xs:sequence dfdl:choiceBranchKey="missing" />
          </xs:choice>
        </xs:sequence>
        <xs:sequence dfdl:choiceBranchKey="NaN" />
      </xs:choice>
    </xs:sequence>
  </xs:complexType>

  <xs:element name="TaggedRecordExtensions">
    <xs:complexType>
      <xs:sequence>
        <xs:element name="TaggedRecordExtension" type="nitfx:taggedRecordExtension" minOccurs="0" maxOccurs="unbounded" dfdl:occursCountKind="parsed" />
      </xs:sequence>
    </xs:complexType>
  </xs:element>

  <xs:group name="PadOutputPixelCodeLeadingSpace">
    <xs:sequence>
      <xs:element name="LeadingSpace" type="xs:int" dfdl:lengthKind="explicit" dfdl:length="{ if (../../../../Header/PixelJustification eq 'L') then 0 else (xs:int(fn:ceiling(../../PadOutputPixelCodeLength div 8.0) * 8) - ../../PadOutputPixelCodeLength) }" dfdl:lengthUnits="bits" dfdl:representation="binary" dfdl:outputValueCalc="{ 0 }"/>
    </xs:sequence>
  </xs:group>

</xs:schema>
