<?xml version="1.0" encoding="UTF-8"?>

<!--
Copyright (c) 2021 Owl Cyber Defense. All rights reserved.

Developed by: Owl Cyber Defense
              http://www.owlcyberdefense.com

Permission is hereby granted, free of charge, to any person obtaining a copy of
this software and associated documentation files (the "Software"), to deal with
the Software without restriction, including without limitation the rights to
use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies
of the Software, and to permit persons to whom the Software is furnished to do
so, subject to the following conditions:

 1. Redistributions of source code must retain the above copyright notice,
    this list of conditions and the following disclaimers.

 2. Redistributions in binary form must reproduce the above copyright
    notice, this list of conditions and the following disclaimers in the
    documentation and/or other materials provided with the distribution.

 3. Neither the names of Tresys Technology, nor the names of its contributors
    may be used to endorse or promote products derived from this Software
    without specific prior written permission.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
CONTRIBUTORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS WITH THE
SOFTWARE.
-->


<!--
Version 0.0.1  nitf_common_types.dfdl.xsd

This DFDL schema provides the common types that will be used by all NITF based
schema projects.
-->


<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema"
           xmlns:dfdl="http://www.ogf.org/dfdl/dfdl-1.0/"
           xmlns:dfdlx="http://www.ogf.org/dfdl/dfdl-1.0/extensions"
           xmlns:fn="http://www.w3.org/2005/xpath-functions"
           xmlns:daf="urn:ogf:dfdl:2013:imp:daffodil.apache.org:2018:ext"
           xmlns:nitf="urn:nitf:2.1"
           xmlns:nitfc="urn:nitfCommonTypes"
           targetNamespace="urn:nitfCommonTypes"
           elementFormDefault="unqualified">

  <xs:annotation>
    <xs:appinfo source="http://www.ogf.org/dfdl/">

      <dfdl:defineFormat name="nitfGeneralFormat">
        <dfdl:format representation="text" alignment="1" alignmentUnits="bytes"
          binaryBooleanFalseRep="0" binaryBooleanTrueRep="1"
          binaryCalendarEpoch="1970-01-01T00:00:00+00:00" binaryCalendarRep="bcd"
          binaryDecimalVirtualPoint="0" binaryFloatRep="ieee"
          binaryNumberCheckPolicy="lax" binaryNumberRep="binary"
          binaryPackedSignCodes="C D F C" calendarCenturyStart="53"
          calendarCheckPolicy="lax" calendarDaysInFirstWeek="4"
          calendarFirstDayOfWeek="Monday" calendarLanguage="en-US"
          calendarObserveDST="yes" calendarPatternKind="implicit"
          calendarPattern="yyyy-MM-dd'T'HH:mm:ss" calendarTimeZone="UTC"
          choiceLengthKind="implicit" decimalSigned="yes"
          documentFinalTerminatorCanBeMissing="no" emptyValueDelimiterPolicy="none"
          encoding="us-ascii" encodingErrorPolicy="replace" escapeSchemeRef=""
          fillByte="%NUL;" floating="no" ignoreCase="no" initiatedContent="no"
          initiator="" leadingSkip="0" lengthKind="implicit" lengthUnits="bytes"
          occursCountKind="implicit" outputNewLine="%CR;%LF;"
          prefixIncludesPrefixLength="no" separator=""
          separatorPosition="infix" sequenceKind="ordered" terminator=""
          textBidi="no" textBooleanFalseRep="false" textBooleanJustification="left"
          textBooleanPadCharacter="%SP;" textBooleanTrueRep="true"
          textCalendarJustification="left" textCalendarPadCharacter="%SP;"
          textNumberCheckPolicy="strict" textNumberJustification="right"
          textNumberPadCharacter="0" textNumberPattern="#0" textNumberRep="standard"
          textNumberRoundingIncrement="0.0" textNumberRoundingMode="roundUp"
          textNumberRounding="pattern" textOutputMinLength="0" textPadKind="padChar"
          textStandardBase="10" textStandardDecimalSeparator="."
          textStandardGroupingSeparator="," textStandardInfinityRep="Inf"
          textStandardNaNRep="NaN" textStandardZeroRep="" textStandardExponentRep=""
          textStringJustification="left" textStringPadCharacter="%SP;"
          textTrimKind="none" textZonedSignStyle="asciiStandard" trailingSkip="0"
          truncateSpecifiedLengthString="no" utf16Width="fixed"
          bitOrder="mostSignificantBitFirst" byteOrder="bigEndian"/>
      </dfdl:defineFormat>

      <dfdl:defineFormat name="nilString">
        <dfdl:format nilKind="literalValue" nilValue="%ES;" useNilForDefault="no" nilValueDelimiterPolicy="none" />
      </dfdl:defineFormat>

      <dfdl:defineFormat name="nilDate">
        <dfdl:format nilKind="literalCharacter" nilValue="%SP;" useNilForDefault="no" nilValueDelimiterPolicy="none" />
      </dfdl:defineFormat>

      <dfdl:format ref="nitfGeneralFormat" />

    </xs:appinfo>
  </xs:annotation>

  <!-- Should only 0x20-0x7E and 0xA0-0xFF -->
  <xs:simpleType name="ECS-A" dfdl:lengthKind="explicit" dfdl:textTrimKind="padChar">
    <xs:restriction base="xs:string" />
  </xs:simpleType>

  <!-- Should only allow space, tilde, and 0x20-0x7E -->
  <xs:simpleType name="BCS-A" dfdl:lengthKind="explicit" dfdl:textTrimKind="padChar">
    <xs:restriction base="xs:string" />
  </xs:simpleType>

  <!-- Should only allow plus, minus, and digits 0-9 -->
  <xs:simpleType name="BCS-N" dfdl:lengthKind="explicit" dfdl:textTrimKind="none" dfdl:textNumberPattern="#0" >
    <xs:restriction base="xs:long" />
  </xs:simpleType>

  <!-- Should only allow digits 0-9. This must only be used for types less than or equal to 9 digits long -->
  <xs:simpleType name="BCS-NP" dfdl:lengthKind="explicit" dfdl:textTrimKind="none" dfdl:textNumberPattern="#0" >
    <xs:restriction base="xs:unsignedInt" />
  </xs:simpleType>

  <!-- Should only allow digits 0-9. For performance, this should only be used for types greather than 9 digits long -->
  <xs:simpleType name="BCS-NPbig" dfdl:lengthKind="explicit" dfdl:textTrimKind="none" dfdl:textNumberPattern="#0" >
    <xs:restriction base="xs:unsignedLong" />
  </xs:simpleType>

  <xs:complexType name="dateTime">
    <xs:choice>
      <xs:element name="dateTime2.1" type="xs:dateTime" dfdl:lengthKind="explicit" dfdl:length="14" dfdl:calendarPatternKind="explicit" dfdl:calendarPattern="yyyyMMddHHmmss" />
      <!-- NITF 2.0 data uses a different pattern for dates, but has been inconsistent across various test files
           so we are currently accepting a 14 character string -->
      <xs:element name="dateTimeStr" type="xs:string" dfdl:lengthKind="explicit" dfdl:length="14" />
    </xs:choice>
  </xs:complexType>

  <xs:simpleType name="date" dfdl:lengthKind="explicit" dfdl:length="8" dfdl:calendarPatternKind="explicit" dfdl:calendarPattern="yyyyMMdd">
    <xs:restriction base="xs:date" />
  </xs:simpleType>

  <xs:simpleType name="unsignedBinaryIntBytes" dfdl:lengthKind="explicit" dfdl:lengthUnits="bytes" dfdl:representation="binary">
    <xs:restriction base="xs:unsignedInt" />
  </xs:simpleType>

  <xs:simpleType name="signedBinaryIntBytes" dfdl:lengthKind="explicit" dfdl:lengthUnits="bytes" dfdl:representation="binary">
    <xs:restriction base="xs:int" />
  </xs:simpleType>

  <xs:simpleType name="unsignedBinaryIntBits" dfdl:lengthKind="explicit" dfdl:lengthUnits="bits" dfdl:representation="binary" dfdl:alignmentUnits="bits">
    <xs:restriction base="xs:unsignedInt" />
  </xs:simpleType>

  <xs:simpleType name="signedBinaryIntBits" dfdl:lengthKind="explicit" dfdl:lengthUnits="bits" dfdl:representation="binary" dfdl:alignmentUnits="bits">
    <xs:restriction base="xs:int" />
  </xs:simpleType>

  <xs:complexType name="hexBinaryOrBlob">
    <xs:choice dfdl:choiceDispatchKey="{ if ($nitf:payloadSizeInBytes gt $nitf:maxBinarySizeInBytes) then 'blob' else 'hb' }">
      <xs:element name="HexBinaryPayload" dfdl:choiceBranchKey="hb" type="xs:hexBinary" dfdl:lengthKind="explicit" dfdl:length="{ $nitf:payloadSizeInBytes }" />
      <xs:element name="BlobPayload" dfdl:choiceBranchKey="blob" type="xs:anyURI" dfdlx:objectKind="bytes" dfdl:lengthKind="explicit" dfdl:length="{ $nitf:payloadSizeInBytes }" />
    </xs:choice>
  </xs:complexType>

  <xs:complexType name="maskTable">
    <xs:sequence>
      <xs:element name="BlockedImageDataOffset" type="nitfc:unsignedBinaryIntBytes" dfdl:length="4" />
      <xs:element name="BlockMaskRecordLength" type="nitfc:unsignedBinaryIntBytes" dfdl:length="2" />
      <xs:element name="PadPixelMaskRecordLength" type="nitfc:unsignedBinaryIntBytes" dfdl:length="2" />
      <xs:element name="PadOutputPixelCodeLength" type="nitfc:unsignedBinaryIntBytes" dfdl:length="2" />
      <xs:element name="PadOutputPixelCode" minOccurs="0" dfdl:occursCountKind="expression" dfdl:occursCount="{ if (../PadOutputPixelCodeLength eq 0) then 0 else 1 }" dfdl:lengthKind="explicit" dfdl:length="{ xs:long(fn:ceiling(../PadOutputPixelCodeLength div 8.0)) }" dfdl:lengthUnits="bytes">
        <xs:complexType>
          <xs:sequence dfdl:alignmentUnits="bits">
            <xs:sequence dfdl:hiddenGroupRef="nitf:PadOutputPixelCodeLeadingSpace" />
            <xs:choice dfdl:choiceDispatchKey="{ ../../../Header/PixelValueType }" dfdl:alignmentUnits="bits">
              <xs:element name="Integer" dfdl:choiceBranchKey="INT" type="nitfc:unsignedBinaryIntBits" dfdl:length="{ ../../PadOutputPixelCodeLength }"/>
              <xs:element name="SignedInteger" dfdl:choiceBranchKey="SI" type="nitfc:signedBinaryIntBits" dfdl:length="{ ../../PadOutputPixelCodeLength }" />
              <xs:choice dfdl:choiceBranchKey="R" dfdl:choiceDispatchKey="{ xs:string(../../../Header/NumberOfBitsPerPixelPerBand) }" dfdl:alignmentUnits="bits">
                <xs:annotation>
                  <xs:appinfo source="http://www.ogf.org/dfdl/">
                    <dfdl:assert test="{ ../PadOutputPixelCodeLength eq ../../../Header/NumberOfBitsPerPixelPerBand }" />
                  </xs:appinfo>
                </xs:annotation>
                <xs:element name="Float" dfdl:choiceBranchKey="32" type="xs:float" dfdl:representation="binary" dfdl:alignmentUnits="bits"/>
                <xs:element name="Double" dfdl:choiceBranchKey="64" type="xs:double" dfdl:representation="binary" dfdl:alignmentUnits="bits"/>
              </xs:choice>
              <xs:sequence dfdl:choiceBranchKey="C" dfdl:alignmentUnits="bits">
                <xs:annotation>
                  <xs:appinfo source="http://www.ogf.org/dfdl/">
                    <dfdl:assert test="{ ../PadOutputPixelCodeLength eq 64 }" />
                  </xs:appinfo>
                </xs:annotation>
                <xs:element name="Real" type="xs:float" dfdl:representation="binary" dfdl:alignmentUnits="bits"/>
                <xs:element name="Imaginary" type="xs:float" dfdl:representation="binary" dfdl:alignmentUnits="bits"/>
              </xs:sequence>
              <xs:element name="BiLevel" dfdl:choiceBranchKey="B" type="nitfc:unsignedBinaryIntBits" dfdl:length="1">
                <xs:annotation>
                  <xs:appinfo source="http://www.ogf.org/dfdl/">
                    <dfdl:assert test="{ ../../PadOutputPixelCodeLength eq 1 }" />
                  </xs:appinfo>
                </xs:annotation>
              </xs:element>
            </xs:choice>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element name="BlockMaskRecord" minOccurs="0" maxOccurs="unbounded" type="nitfc:unsignedBinaryIntBytes" dfdl:length="4" dfdl:occursCountKind="expression" dfdl:occursCount="{ if (../BlockMaskRecordLength eq 0) then 0 else (../../../Header/NumberOfBlocksPerRow * ../../../Header/NumberOfBlocksPerColumn * (if (../../../Header/ImageMode eq 'S') then (if (fn:exists(../../../Header/NumberOfMultispectralBands)) then ../../../Header/NumberOfMultispectralBands[1]/Value else ../../../Header/NumberOfBands) else xs:unsignedInt(1))) }" />
      <xs:element name="PadPixelMaskRecord" minOccurs="0" maxOccurs="unbounded" type="nitfc:unsignedBinaryIntBytes" dfdl:length="4" dfdl:occursCountKind="expression" dfdl:occursCount="{ if (../PadOutputPixelCodeLength eq 0) then 0 else (../../../Header/NumberOfBlocksPerRow * ../../../Header/NumberOfBlocksPerColumn * (if (../../../Header/ImageMode eq 'S') then (if (fn:exists(../../../Header/NumberOfMultispectralBands)) then ../../../Header/NumberOfMultispectralBands[1]/Value else ../../../Header/NumberOfBands) else xs:unsignedInt(1))) }" />
    </xs:sequence>
  </xs:complexType>

</xs:schema>

